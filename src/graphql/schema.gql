scalar Any

# Queries

type Query {
  space(id: String): Space

  spaces(
    first: Int
    skip: Int
    where: SpaceWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Space]

  proposal(id: String): Proposal

  proposals(
    first: Int
    skip: Int
    where: ProposalWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Proposal]

  vote(id: String): Vote

  votes(
    first: Int
    skip: Int
    where: VoteWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Vote]

  aliases(
    first: Int
    skip: Int
    where: AliasWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Alias]

  follows(
    first: Int
    skip: Int
    where: FollowWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Follow]

  subscriptions(
    first: Int
    skip: Int
    where: SubscriptionWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Subscription]

  skins: [Item]

  networks: [Item]

  validations: [Item]

  plugins: [Item]

  strategies: [StrategyItem]

  strategy(id: String): StrategyItem
}

input SpaceWhere {
  id: String
  id_in: [String]
}

input ProposalWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  author: String
  author_in: [String]
  network: String
  network_in: [String]
  type: String
  type_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  start: Int
  start_in: [Int]
  start_gt: Int
  start_gte: Int
  start_lt: Int
  start_lte: Int
  end: Int
  end_in: [Int]
  end_gt: Int
  end_gte: Int
  end_lt: Int
  end_lte: Int
  scores_state: String
  scores_state_in: [String]
  state: String
}

input VoteWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  voter: String
  voter_in: [String]
  proposal: String
  proposal_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  vp: Float
  vp_in: [Float]
  vp_gt: Float
  vp_gte: Float
  vp_lt: Float
  vp_lte: Float
  vp_state: String
  vp_state_in: [String]
}

input AliasWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  alias: String
  alias_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input FollowWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  follower: String
  follower_in: [String]
  space: String
  space_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input SubscriptionWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  space: String
  space_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

enum OrderDirection {
  asc
  desc
}

# Types

type Space {
  id: String!
  name: String
  private: Boolean
  about: String
  avatar: String
  terms: String
  location: String
  website: String
  twitter: String
  github: String
  email: String
  network: String
  symbol: String
  skin: String
  domain: String
  strategies: [Strategy]
  admins: [String]
  members: [String]
  filters: SpaceFilters
  plugins: Any
  voting: SpaceVoting
  categories: [String]
  validation: Strategy
  followersCount: Int
  proposalsCount: Int
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type SpaceVoting {
  delay: Int
  period: Int
  type: String
  quorum: Float
  blind: Boolean
  hideAbstain: Boolean
}

type Proposal {
  id: String!
  ipfs: String
  author: String!
  created: Int!
  space: Space
  network: String!
  type: String
  strategies: [Strategy]!
  plugins: Any!
  title: String!
  body: String
  choices: [String]!
  start: Int!
  end: Int!
  snapshot: String
  state: String
  link: String
  scores: [Float]
  scores_by_strategy: Any
  scores_state: String
  scores_total: Float
  scores_updated: Int
  votes: Int
}

type Strategy {
  name: String!
  network: String
  params: Any
}

type Vote {
  id: String!
  ipfs: String
  voter: String!
  created: Int!
  space: Space!
  proposal: Proposal
  choice: Any!
  metadata: Any
  vp: Float
  vp_by_strategy: [Float]
  vp_state: String
}

type Alias {
  id: String!
  ipfs: String
  address: String!
  alias: String!
  created: Int!
}

type Follow {
  id: String!
  ipfs: String
  follower: String!
  space: Space!
  created: Int!
}

type Subscription {
  id: String!
  ipfs: String
  address: String!
  space: Space!
  created: Int!
}

type Item {
  id: String!
  spacesCount: Int
}

type StrategyItem {
  id: String!
  author: String
  version: String
  schema: Any
  examples: [Any]
  about: String
  spacesCount: Int
}
