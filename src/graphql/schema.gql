scalar Any

# Queries

type Query {
  space(id: String!): Space

  spaces(
    first: Int! = 20
    skip: Int! = 0
    where: SpaceWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Space]

  ranking(first: Int! = 20, skip: Int! = 0, where: RankingWhere): RankingObject

  proposal(id: String!): Proposal

  proposals(
    first: Int! = 20
    skip: Int! = 0
    where: ProposalWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Proposal]

  vote(id: String!): Vote

  votes(
    first: Int! = 20
    skip: Int! = 0
    where: VoteWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Vote]

  aliases(
    first: Int! = 20
    skip: Int! = 0
    where: AliasWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Alias]

  roles(where: RolesWhere!): [Role]

  follows(
    first: Int! = 20
    skip: Int! = 0
    where: FollowWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Follow]

  subscriptions(
    first: Int! = 20
    skip: Int! = 0
    where: SubscriptionWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Subscription]

  users(
    first: Int! = 20
    skip: Int! = 0
    where: UsersWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [User]

  statements(
    first: Int! = 20
    skip: Int! = 0
    where: StatementsWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Statement]

  user(id: String!): User

  statement(id: String!): Statement

  skins: [Item]

  networks: [Item]

  validations: [Item]

  plugins: [Item]

  strategies: [StrategyItem]

  strategy(id: String!): StrategyItem

  vp(voter: String!, space: String!, proposal: String): Vp

  messages(
    first: Int! = 20
    skip: Int! = 0
    where: MessageWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Message]

  leaderboards(
    first: Int! = 20
    skip: Int! = 0
    where: LeaderboardsWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Leaderboard]
}

input SpaceWhere {
  id: String
  id_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  strategy: String
  plugin: String
  controller: String
  verified: Boolean
}

input RankingWhere {
  search: String
  category: String
  network: String
  strategy: String
  plugin: String
}

input MessageWhere {
  id: String
  id_in: [String]
  mci: Int
  mci_in: [Int]
  mci_gt: Int
  mci_gte: Int
  mci_lt: Int
  mci_lte: Int
  address: String
  address_in: [String]
  timestamp: Int
  timestamp_in: [Int]
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_lt: Int
  timestamp_lte: Int
  space: String
  space_in: [String]
  type: String
  type_in: [String]
}

type Message {
  mci: Int
  id: String
  ipfs: String
  address: String
  version: String
  timestamp: Int
  space: String
  type: String
  sig: String
  receipt: String
}

input ProposalWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  author: String
  author_in: [String]
  network: String
  network_in: [String]
  title_contains: String
  strategies_contains: String
  plugins_contains: String
  validation: String
  type: String
  type_in: [String]
  app: String
  app_not: String
  app_in: [String]
  app_not_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  updated: Int
  updated_in: [Int]
  updated_gt: Int
  updated_gte: Int
  updated_lt: Int
  updated_lte: Int
  start: Int
  start_in: [Int]
  start_gt: Int
  start_gte: Int
  start_lt: Int
  start_lte: Int
  end: Int
  end_in: [Int]
  end_gt: Int
  end_gte: Int
  end_lt: Int
  end_lte: Int
  scores_state: String
  scores_state_in: [String]
  state: String
  space_verified: Boolean
  flagged: Boolean
}

input VoteWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  voter: String
  voter_in: [String]
  proposal: String
  proposal_in: [String]
  reason: String
  reason_not: String
  reason_in: [String]
  reason_not_in: [String]
  app: String
  app_not: String
  app_in: [String]
  app_not_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  vp: Float
  vp_in: [Float]
  vp_gt: Float
  vp_gte: Float
  vp_lt: Float
  vp_lte: Float
  vp_state: String
  vp_state_in: [String]
}

input AliasWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  alias: String
  alias_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input RolesWhere {
  address: String!
}

input FollowWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  follower: String
  follower_in: [String]
  space: String
  space_in: [String]
  network: String
  network_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input SubscriptionWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  space: String
  space_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input UsersWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input StatementsWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  network: String
  delegate: String
  delegate_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  source: String
  source_in: [String]
}

input LeaderboardsWhere {
  space: String
  space_in: [String]
  space_not: String
  space_not_in: [String]
  user: String
  user_in: [String]
  user_not: String
  user_not_in: [String]
  proposal_count: Int
  proposal_count_in: [Int]
  proposal_count_not: Int
  proposal_count_not_in: [Int]
  proposal_count_gt: [Int]
  proposal_count_gte: [Int]
  proposal_count_lt: [Int]
  proposal_count_lte: [Int]
  vote_count: Int
  vote_count_in: [Int]
  vote_count_not: Int
  vote_count_not_in: [Int]
  vote_count_gt: [Int]
  vote_count_gte: [Int]
  vote_count_lt: [Int]
  vote_count_lte: [Int]
}

enum OrderDirection {
  asc
  desc
}

# Types

type Space {
  id: String!
  name: String
  private: Boolean
  about: String
  avatar: String
  cover: String
  terms: String
  location: String
  website: String
  twitter: String
  github: String
  coingecko: String
  email: String
  network: String
  symbol: String
  skin: String
  domain: String
  strategies: [Strategy]
  admins: [String]
  members: [String]
  moderators: [String]
  filters: SpaceFilters
  plugins: Any
  voting: SpaceVoting
  categories: [String]
  validation: Validation
  voteValidation: Validation
  delegationPortal: DelegationPortal
  treasuries: [Treasury]
  activeProposals: Int
  proposalsCount: Int
  proposalsCount1d: Int
  proposalsCount7d: Int
  proposalsCount30d: Int
  followersCount: Int
  followersCount7d: Int
  votesCount: Int
  votesCount7d: Int
  parent: Space
  children: [Space]
  guidelines: String
  template: String
  verified: Boolean
  flagged: Boolean
  hibernated: Boolean
  turbo: Boolean
  rank: Float
  boost: BoostSettings
  created: Int!
}

type RankingObject {
  items: [Space]
  metrics: Metrics
}

type Metrics {
  total: Int
  categories: Any
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type SpaceVoting {
  delay: Int
  period: Int
  type: String
  quorum: Float
  quorumType: String!
  blind: Boolean
  hideAbstain: Boolean
  privacy: String
  aliased: Boolean
}

type Proposal {
  id: String!
  ipfs: String
  author: String!
  created: Int!
  updated: Int
  space: Space
  network: String!
  symbol: String!
  type: String
  strategies: [Strategy]!
  validation: Validation
  plugins: Any!
  title: String!
  body: String
  discussion: String!
  choices: [String]!
  start: Int!
  end: Int!
  quorum: Float!
  quorumType: String!
  privacy: String
  snapshot: String
  state: String
  link: String
  app: String
  scores: [Float]
  scores_by_strategy: Any
  scores_state: String
  scores_total: Float
  scores_updated: Int
  votes: Int
  flagged: Boolean
}

type Strategy {
  name: String!
  network: String
  params: Any
}

type Validation {
  name: String!
  params: Any
}

type DelegationPortal {
  delegationType: String!
  delegationContract: String!
  delegationNetwork: String!
  delegationApi: String!
}

type Vote {
  id: String!
  ipfs: String
  voter: String!
  created: Int!
  space: Space!
  proposal: Proposal
  choice: Any!
  metadata: Any
  reason: String
  app: String
  vp: Float
  vp_by_strategy: [Float]
  vp_state: String
}

type Alias {
  id: String!
  ipfs: String
  address: String!
  alias: String!
  created: Int!
}

type Role {
  space: String
  permissions: [String]
}

type Follow {
  id: String!
  ipfs: String
  follower: String!
  space: Space!
  network: String!
  created: Int!
}

type Subscription {
  id: String!
  ipfs: String
  address: String!
  space: Space!
  created: Int!
}

type User {
  id: String!
  ipfs: String
  name: String
  about: String
  avatar: String
  cover: String
  github: String
  twitter: String
  lens: String
  farcaster: String
  created: Int
  votesCount: Int
  proposalsCount: Int
  lastVote: Int
}

type Statement {
  id: String!
  ipfs: String!
  space: String!
  network: String
  about: String
  delegate: String
  statement: String
  discourse: String
  status: String
  source: String
  created: Int!
  updated: Int!
}

type Item {
  id: String!
  spacesCount: Int
}

type StrategyItem {
  id: String!
  author: String
  version: String
  schema: Any
  examples: [Any]
  about: String
  spacesCount: Int
}

type Treasury {
  name: String
  address: String
  network: String
}

type BoostSettings {
  enabled: Boolean
  bribeEnabled: Boolean
}

type Vp {
  vp: Float
  vp_by_strategy: [Float]
  vp_state: String
}

type Leaderboard {
  space: String
  user: String
  proposalsCount: Int
  votesCount: Int
  lastVote: Int
}
